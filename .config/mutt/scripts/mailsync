#!/usr/bin/env bash

# Based on mailsync from mutt-wizard

# - Syncs mail for all accounts, or a single account given as an argument.
# - Displays a notification showing the number of new mails.
# - Displays a notification for each new mail with its subject displayed.
# - Runs notmuch to index new mail.
# - This script can be set up as a cron job for automated mail syncing.

# There are many arbitrary and ugly features in this script because it is
# inherently difficult to pass environmental variables to cronjobs and other
# issues. It also should at least be compatible with Linux (and maybe BSD) with
# Xorg and MacOS as well.

# Run only if user logged in (prevent cron errors)
pgrep -u "${USER:=$LOGNAME}" >/dev/null || { echo "$USER not logged in; sync will not run."; exit ;}
# Run only if not already running in other instance
pgrep -x mbsync >/dev/null && { echo "mbsync is already running." ; exit ;}

# First, we have to get the right variables for the mbsync file, the pass
# archive, notmuch and the GPG home.  This is done by searching common profile
# files for variable assignments. This is ugly, but there are few options that
# will work on the maximum number of machines.
eval "$(grep -h -- \
	"^\s*\(export \)\?\(MBSYNCRC\|PASSWORD_STORE_DIR\|NOTMUCH_CONFIG\|GNUPGHOME\)=" \
	"$HOME/.profile" "$HOME/.bash_profile" "$HOME/.bashrc" "$HOME/.pam_environment" 2>/dev/null)"

case "$(readlink -f /sbin/init)" in
	*systemd*) export DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/${UID}/bus ;;
esac
export GPG_TTY=$TTY

[[ -n "${MBSYNCRC}" ]] || MBSYNCRC="$HOME/.mbsyncrc"
MBSYNC="mbsync -c ${MBSYNCRC}"

DISPLAYS="$(pgrep -a X\(org\|wayland\) | grep -wo "[0-9]*:[0-9]\+" | sort -u)"
notify() {
    for x in ${DISPLAYS}; do
        export DISPLAY=$x
        notify-send --app-name="mutt" -- "mutt" "ðŸ“¬ $2 new mail(s) in \`$1\` account."
    done
}
messageinfo() {
    for x in ${DISPLAYS}; do
        export DISPLAY=$x
        notify-send --app-name="mutt" -- "ðŸ“§ ${FROM}:" "${SUBJECT}"
    done
}

# Check account for new mail. Notify if there is new content.
syncandnotify() {
    ACC="$(echo "${account}" | sed "s/.*\///")"
    if [[ -z "${OPTS}" ]]; then ${MBSYNC} "${ACC}"; else ${MBSYNC} "${OPTS}" "${ACC}"; fi
    NEW=$(find "${HOME}/.local/share/mail/${ACC}/INBOX/new/" "${HOME}/.local/share/mail/${ACC}/Inbox/new/" "${HOME}/.local/share/mail/${ACC}/inbox/new/" -type f -newer "${XDG_CONFIG_HOME:-$HOME/.config}/mutt/.mailsynclastrun" 2> /dev/null)
    NEWCOUNT=$(echo "${NEW}" | sed '/^\s*$/d' | wc -l)
    if [[ ${NEWCOUNT} -gt 0 ]]; then
        notify "${ACC}" "${NEWCOUNT}" &
        for file in ${NEW}; do
            # Extract subject and sender from mail.
            FROM="$(awk '/^From: / && ++n ==1,/^\<.*\>:/' "${file}" | perl -CS -MEncode -ne 'print decode("MIME-Header", $_)' | awk '{ $1=""; if (NF>=3)$NF=""; print $0 }' | sed 's/^[[:blank:]]*[\"'\''\<]*//;s/[\"'\''\>]*[[:blank:]]*$//')"
            SUBJECT="$(awk '/^Subject: / && ++n == 1,/^\<.*\>: / && ++i == 2' "${file}" | head -n 1 | perl -CS -MEncode -ne 'print decode("MIME-Header", $_)' | sed 's/^Subject: //' | sed 's/^{[[:blank:]]*[\"'\''\<]*//;s/[\"'\''\>]*[[:blank:]]*$//' | tr -d '\n')"
            messageinfo &
        done
    fi
}

# Sync accounts passed as argument or all.
if [[ $# -eq 0 ]]; then
    ACCOUNTS="$(awk '/^Channel/ {print $2}' "${MBSYNCRC}")"
else
    for arg in "$@"; do
        [[ "${arg%${arg#?}}" = '-' ]] && OPTS="${OPTS:+${OPTS} }${arg}" && shift 1
    done
    ACCOUNTS=$*
fi

# Parallelize multiple accounts
for account in ${ACCOUNTS}; do
    syncandnotify &
done

wait

notmuch new 2>/dev/null

# Create a touch file that indicates the time of the last run of mailsync
touch "${XDG_CONFIG_HOME:-$HOME/.config}/mutt/.mailsynclastrun"
